{"version":3,"sources":["../../src/context.tsx","../../src/index.tsx"],"names":["I18nContext","createContext","I18nProvider","props","children","fallback","language","dangerouslySetText","replaceUndefinedKey","currentLang","setLanguage","useState","fallbackLang","setFallback","useEffect","React","useI18N","objects","context","useContext","section","useMemo","mergeContent","useCallback","key","variables","options","isKey","hasI18nKey","processI18N"],"mappings":"8LAWO,IAAMA,EAAcC,eAAc,CAAA,CACvC,SAAU,IACV,CAAA,QAAA,CAAU,KACV,kBAAoB,CAAA,MAAA,CACpB,oBAAqB,MACrB,CAAA,WAAA,CAAa,OACb,WAAa,CAAA,MACf,CAAC,CAEYC,CAAAA,CAAAA,CAAgBC,CAA2C,EAAA,CACtE,GAAM,CAAE,SAAAC,CAAU,CAAA,QAAA,CAAAC,EAAU,QAAAC,CAAAA,CAAAA,CAAU,mBAAAC,CAAoB,CAAA,mBAAA,CAAAC,CAAoB,CAAIL,CAAAA,CAAAA,CAC5E,CAACM,CAAaC,CAAAA,CAAW,EAAIC,UAASL,CAAAA,CAAQ,EAC9C,CAACM,CAAAA,CAAcC,CAAW,CAAA,CAAIF,UAASN,CAAAA,CAAQ,EAErD,OAAAS,WAAAA,CAAU,IAAM,CACdJ,CAAAA,CAAYJ,CAAQ,EACtB,CAAA,CAAG,CAACA,CAAQ,CAAC,EAEbQ,WAAU,CAAA,IAAM,CACdD,CAAYR,CAAAA,CAAQ,EACtB,CAAG,CAAA,CAACA,CAAQ,CAAC,CAGXU,CAAAA,kBAAAA,CAAA,cAACf,CAAY,CAAA,QAAA,CAAZ,CACC,KAAO,CAAA,CACL,SAAUY,CACV,CAAA,QAAA,CAAUH,EACV,kBAAAF,CAAAA,CAAAA,CACA,oBAAAC,CACA,CAAA,WAAA,CAAAE,EACA,WAAAG,CAAAA,CACF,GAECT,CACH,CAEJ,EC1BO,SAASY,CAAcC,CAAAA,GAAAA,CAAAA,CAAmB,CAC/C,IAAMC,CAAAA,CAAUC,aAAWnB,CAAW,CAAA,CAEhCoB,EAAUC,SACd,CAAA,IACEC,yBAAaL,CAAS,CAAA,CACpB,SAAUC,CAAQ,CAAA,QAAA,CAClB,SAAUA,CAAQ,CAAA,QACpB,CAAC,CACH,CAAA,CAACA,CAAO,CACV,CAyBA,CAAA,OAAO,CAAE,CArBCK,CAAAA,aAAAA,CACR,CAACC,CAAUC,CAAAA,CAAAA,GAAoC,CAC7C,IAAMC,CAAAA,CAAU,CACd,GAAAF,CAAAA,CAAAA,CACA,UAAAC,CACF,CAAA,CAEME,EAAQC,sBAAWR,CAAAA,CAAAA,CAASM,CAAO,CACzC,CAAA,OAAI,CAACC,CAAAA,EAAST,CAAQ,CAAA,mBAAA,CACbA,EAAQ,mBAAoBM,CAAAA,CAAG,EAGpCG,CAAST,EAAAA,CAAAA,CAAQ,mBACZA,CAAQ,CAAA,kBAAA,CAGVW,wBAAYT,CAASM,CAAAA,CAAO,CACrC,CACA,CAAA,CAACR,CAAO,CACV,CAAA,CAEY,OAAQU,sBAAY,CAAA,QAAA,CAAUV,CAAQ,CAAA,QAAS,CAC7D","file":"index.js","sourcesContent":["import React, { createContext, type PropsWithChildren, useEffect, useState } from 'react'\n\ntype ContextProps = {\n  language: string | null\n  fallback: string | null\n  dangerouslySetText?: string\n  replaceUndefinedKey?: (key: string) => string\n  setLanguage?: (key: string) => void\n  setFallback?: (key: string) => void\n}\n\nexport const I18nContext = createContext({\n  language: null,\n  fallback: null,\n  dangerouslySetText: undefined,\n  replaceUndefinedKey: undefined,\n  setLanguage: undefined,\n  setFallback: undefined,\n})\n\nexport const I18nProvider = (props: PropsWithChildren<ContextProps>) => {\n  const { children, fallback, language, dangerouslySetText, replaceUndefinedKey } = props\n  const [currentLang, setLanguage] = useState(language)\n  const [fallbackLang, setFallback] = useState(fallback)\n\n  useEffect(() => {\n    setLanguage(language)\n  }, [language])\n\n  useEffect(() => {\n    setFallback(fallback)\n  }, [fallback])\n\n  return (\n    <I18nContext.Provider\n      value={{\n        fallback: fallbackLang,\n        language: currentLang,\n        dangerouslySetText,\n        replaceUndefinedKey,\n        setLanguage,\n        setFallback,\n      }}\n    >\n      {children}\n    </I18nContext.Provider>\n  )\n}\n","import { hasI18nKey, mergeContent, processI18N } from '@coxy/i18n-process'\nimport { useCallback, useContext, useMemo } from 'react'\n\nimport { I18nContext, I18nProvider } from './context'\n\nexport { I18nContext, I18nProvider }\n\ntype ParamValues = Record<string, string | number | undefined>\n\ntype Ret<T> = {\n  t: (key: keyof T[keyof T], variables?: ParamValues) => string\n  language: string\n}\n\nexport function useI18N<C>(c: C): Ret<C>\nexport function useI18N<C, O>(c: C, o: O): Ret<C & O>\nexport function useI18N<C, O, X>(c: C, o: O, x: X): Ret<C & O & X>\nexport function useI18N<C, O, X, Y>(c: C, o: O, x: X, y: Y): Ret<C & O & X & Y>\nexport function useI18N<C, O, X, Y, S>(c: C, o: O, x: X, y: Y, s: S): Ret<C & O & X & Y & S>\nexport function useI18N<C, O, X, Y, S, E>(c: C, o: O, x: X, y: Y, s: S, e: E): Ret<C & O & X & Y & S & E>\n\nexport function useI18N<T>(...objects: Array<T>) {\n  const context = useContext(I18nContext)\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const section = useMemo(\n    () =>\n      mergeContent(objects, {\n        language: context.language,\n        fallback: context.fallback,\n      }),\n    [context],\n  )\n\n  type Key = keyof T[keyof T]\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const t = useCallback(\n    (key: Key, variables?: ParamValues): string => {\n      const options = {\n        key,\n        variables,\n      }\n\n      const isKey = hasI18nKey(section, options)\n      if (!isKey && context.replaceUndefinedKey) {\n        return context.replaceUndefinedKey(key)\n      }\n\n      if (isKey && context.dangerouslySetText) {\n        return context.dangerouslySetText\n      }\n\n      return processI18N(section, options)\n    },\n    [context],\n  )\n\n  return { t, hasKey: hasI18nKey, language: context.language } as const\n}\n"]}