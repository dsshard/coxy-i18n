{"version":3,"sources":["../../bin/config.ts","../../bin/restore.ts"],"names":["DELIMITER","program","Command","Option","opts","rootPath","baseDir","mode","isMerge","isInline","prepareIsInlineMode","data","acc","el","path","key","run","dirForFiles","result","files","glob","file","locale","fileDataRaw","fs","fileData","filePathKeys","filePathLocale","filePath","filePathForSave","raw"],"mappings":"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","file":"restore.mjs","sourcesContent":["export const DELIMITER = '-de-limit-er-'\n","#!/usr/bin/env node\n\nimport glob from 'fast-glob'\nimport { Command, Option } from 'commander'\n\nimport path from 'node:path'\nimport fs from 'node:fs'\n\nimport { DELIMITER } from './config'\n\nconst program = new Command()\n\nprogram\n  .version('0.1.0')\n  .description('CLI utils for i18n')\n  .addOption(new Option('-m, --mode [type]', 'set mode').choices(['single', 'split']).default('single'))\n  .addOption(new Option('-i, --inline', 'is inline mode').default(false))\n  .addOption(new Option('-me, --merge', 'merge content').default(true))\n  .option('-p, --path [dir]', 'path for root dir')\n  .requiredOption('-d, --dir [name] ', 'base directory for restore')\n\nprogram.parse()\n\nconst opts = program.opts()\nconst rootPath = opts?.path?.replace(/\\/$/, '') || '.'\nconst baseDir = opts?.dir?.replace(/\\/$/, '')\nconst mode = opts.mode\nconst isMerge = opts.merge\nconst isInline = opts.inline\n\nif (isInline && mode === 'single') {\n  throw new Error('inline mode working only for mode split')\n}\n\nfunction prepareIsInlineMode (data: Record<string, Record<string, string>>): Record<string, Record<string, string>> {\n  if (!isInline) return data\n\n  return Object.keys(data).reduce((acc, el) => {\n    const [path, key] = el.split(DELIMITER)\n    if (!acc[path]) acc[path] = {}\n    acc[path][key] = data[el]\n    return acc\n  }, {})\n}\n\nasync function run () {\n  const dirForFiles = path.resolve(rootPath, baseDir)\n\n  let result = {}\n\n  if (mode === 'split') {\n    const files = await glob(`${dirForFiles}/*.json`)\n    if (!files.length) {\n      // eslint-disable-next-line no-console\n      console.log('Files not found. use: [lang].json format file')\n      return\n    }\n    for (const file of files) {\n      const fileName = path.parse(file).base\n      const locale = fileName.split('.')[0]\n      const fileDataRaw = fs.readFileSync(file).toString()\n      const fileData = prepareIsInlineMode(JSON.parse(fileDataRaw))\n      const filePathKeys = Object.keys(fileData)\n      for (const filePathLocale of filePathKeys) {\n        if (!result[filePathLocale]) result[filePathLocale] = {}\n\n        result[filePathLocale][locale] = fileData[filePathLocale]\n      }\n    }\n  }\n\n  if (mode === 'single') {\n    const fileDataRaw = fs.readFileSync(path.resolve(dirForFiles, 'locales.json')).toString()\n\n    if (!fileDataRaw.length) {\n      // eslint-disable-next-line no-console\n      console.log('Files not found. use: locales.json format file')\n      return\n    }\n\n    result = JSON.parse(fileDataRaw)\n  }\n\n  for (const filePath of Object.keys(result)) {\n    const filePathForSave = path.resolve(rootPath, filePath)\n    let fileData = result[filePath]\n\n    if (isMerge) {\n      const fileDataRaw = fs.readFileSync(filePathForSave).toString()\n      if (fileDataRaw.length) {\n        const raw = JSON.parse(fileDataRaw)\n        fileData = Object.assign({}, raw, fileData)\n      }\n    }\n\n    fs.writeFileSync(filePathForSave, JSON.stringify(fileData, null, 2), 'utf-8')\n  }\n}\n\nvoid run()\n"]}