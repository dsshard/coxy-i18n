{"version":3,"sources":["../../bin/config.ts","../../bin/restore.ts"],"names":["DELIMITER","program","Command","Option","opts","rootPath","baseDir","mode","isMerge","isInline","prepareIsInlineMode","data","acc","el","path","key","run","dirForFiles","result","files","glob","file","locale","fileDataRaw","fs","fileData","filePathKeys","filePathLocale","filePath","filePathForSave","raw"],"mappings":"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","file":"restore.mjs","sourcesContent":["export const DELIMITER = '-de-limit-er-'\n","#!/usr/bin/env node\n\nimport glob from 'fast-glob'\nimport { Command, Option } from 'commander'\n\nimport path from 'node:path'\nimport fs from 'node:fs'\n\nimport { DELIMITER } from './config'\n\nconst program = new Command()\n\nprogram\n  .version('0.1.0')\n  .description('CLI utils for i18n')\n  .addOption(new Option('-m, --mode [type]', 'set mode').choices(['single', 'split']).default('single'))\n  .addOption(new Option('-i, --inline', 'is inline mode').default(false))\n  .addOption(new Option('-me, --merge', 'merge content').default(true))\n  .option('-p, --path [dir]', 'path for root dir')\n  .requiredOption('-d, --dir [name] ', 'base directory for restore')\n\nprogram.parse()\n\nconst opts = program.opts()\nconst rootPath = opts?.path?.replace(/\\/$/, '') || '.'\nconst baseDir = opts?.dir?.replace(/\\/$/, '')\nconst mode = opts.mode\nconst isMerge = opts.merge\nconst isInline = opts.inline\n\nif (isInline && mode === 'single') {\n  throw new Error('inline mode working only for mode split')\n}\n\nfunction prepareIsInlineMode (data: Record<string, Record<string, string>>): Record<string, Record<string, string>> {\n  if (!isInline) return data\n\n  return Object.keys(data).reduce((acc, el) => {\n    const [path, key] = el.split(DELIMITER)\n    if (!acc[path]) acc[path] = {}\n    acc[path][key] = data[el]\n    return acc\n  }, {})\n}\n\nasync function run () {\n  const dirForFiles = path.resolve(rootPath, baseDir)\n\n  let result = {}\n\n  if (mode === 'split') {\n    const files = await glob(`${dirForFiles}/*.json`)\n    if (!files.length) {\n      // eslint-disable-next-line no-console\n      console.log('Files not found. use: [lang].json format file')\n      return\n    }\n    for (const file of files) {\n      const fileName = path.parse(file).base\n      const locale = fileName.split('.')[0]\n      const fileDataRaw = fs.readFileSync(file).toString()\n      const fileData = prepareIsInlineMode(JSON.parse(fileDataRaw))\n      const filePathKeys = Object.keys(fileData)\n      for (const filePathLocale of filePathKeys) {\n        if (!result[filePathLocale]) result[filePathLocale] = {}\n\n        result[filePathLocale][locale] = fileData[filePathLocale]\n      }\n    }\n  }\n\n  if (mode === 'single') {\n    const fileDataRaw = fs.readFileSync(path.resolve(dirForFiles, 'locales.json')).toString()\n\n    if (!fileDataRaw.length) {\n      // eslint-disable-next-line no-console\n      console.log('Files not found. use: locales.json format file')\n      return\n    }\n\n    result = JSON.parse(fileDataRaw)\n  }\n\n  for (const filePath of Object.keys(result)) {\n    const filePathForSave = path.resolve(rootPath, filePath)\n    let fileData = result[filePath]\n\n    if (isMerge) {\n      const fileDataRaw = fs.readFileSync(filePathForSave).toString()\n      if (fileDataRaw.length) {\n        const raw = JSON.parse(fileDataRaw)\n        fileData = Object.assign({}, raw, fileData)\n      }\n    }\n\n    fs.writeFileSync(filePathForSave, JSON.stringify(fileData, null, 2), 'utf-8')\n  }\n}\n\nvoid run()\n"]}