#!/usr/bin/env node
import O from'fast-glob';import {Command,Option}from'commander';import a from'node:path';import f from'node:fs';var u="-de-limit-er-";var m=new Command;m.version("0.1.0").description("CLI utils for i18n").addOption(new Option("-m, --mode [type]","set mode").choices(["single","split"]).default("single")).addOption(new Option("-i, --inline","is inline mode").default(false)).addOption(new Option("-me, --merge","merge content").default(true)).option("-p, --path [dir]","path for root dir").requiredOption("-d, --dir [name] ","base directory for restore");m.parse();var r=m.opts(),h=r?.path?.replace(/\/$/,"")||".",b=r?.dir?.replace(/\/$/,""),p=r.mode,F=r.merge,y=r.inline;if(y&&p==="single")throw new Error("inline mode working only for mode split");function R(n){return y?Object.keys(n).reduce((e,o)=>{let[t,i]=o.split(u);return e[t]||(e[t]={}),e[t][i]=n[o],e},{}):n}async function j(){let n=a.resolve(h,b),e={};if(p==="split"){let o=await O(`${n}/*.json`);if(!o.length)return;for(let t of o){let s=a.parse(t).base.split(".")[0],c=f.readFileSync(t).toString(),g=R(JSON.parse(c)),w=Object.keys(g);for(let l of w)e[l]||(e[l]={}),e[l][s]=g[l];}}if(p==="single"){let o=f.readFileSync(a.resolve(n,"locales.json")).toString();if(!o.length)return;e=JSON.parse(o);}for(let o of Object.keys(e)){let t=a.resolve(h,o),i=e[o];if(F){let s=f.readFileSync(t).toString();if(s.length){let c=JSON.parse(s);i=Object.assign({},c,i);}}f.writeFileSync(t,JSON.stringify(i,null,2),"utf-8");}}j();//# sourceMappingURL=restore.mjs.map
//# sourceMappingURL=restore.mjs.map