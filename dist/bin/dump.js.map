{"version":3,"sources":["../../bin/config.ts","../../bin/dump.ts"],"names":["DELIMITER","program","Command","Option","opts","rootPath","outDir","mode","isInline","fs","prepareIsInlineMode","data","acc","path","elements","elementKey","value","newPath","run","files","glob","result","fileName","keyName","f","locales","localLocales","locale","writeData"],"mappings":"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","file":"dump.js","sourcesContent":["export const DELIMITER = '-de-limit-er-'\n","#!/usr/bin/env node\n\nimport glob from 'fast-glob'\nimport { Command, Option } from 'commander'\n\nimport path from 'node:path'\nimport fs from 'node:fs'\n\nimport { DELIMITER } from './config'\n\nconst program = new Command()\n\nprogram\n  .version('0.1.0')\n  .description('CLI utils for i18n')\n  .addOption(new Option('-m, --mode [type]', 'set mode').choices(['single', 'split']).default('single'))\n  .addOption(new Option('-i, --inline', 'is inline mode').default(false))\n  .option('-p, --path [dir]', 'path for root dir')\n  .requiredOption('-d, --dir [name] ', 'output dir')\n\nprogram.parse()\n\nconst opts = program.opts()\n\nconst rootPath = opts?.path?.replace(/\\/$/, '') || '.'\nconst outDir = `${rootPath}/${opts.dir}`.replace(/\\/$/, '')\nconst mode = opts.mode\nconst isInline = opts.inline\n\nif (isInline && mode === 'single') {\n  throw new Error('inline mode working only for mode split')\n}\n\nif (!fs.existsSync(outDir)) {\n  fs.mkdirSync(outDir)\n}\n\n\nfunction prepareIsInlineMode (data: Record<string, Record<string, string>>):\n  Record<string, string> | Record<string, Record<string, string>> {\n  if (!isInline) return data\n\n  return Object.keys(data).reduce((acc, path) => {\n    const elements = data[path]\n    for (const elementKey of Object.keys(elements)) {\n      const value = elements[elementKey]\n      const newPath = `${String(path)}${DELIMITER}${String(elementKey)}`\n      acc[newPath] = value\n    }\n    return acc\n  }, {})\n}\n\nasync function run () {\n  const files = await glob(`${rootPath}/**/*.i18n.json`, {\n    cwd: process.cwd(),\n    absolute: false,\n    onlyFiles: true\n  })\n\n  const result = {}\n  for (const fileName of files) {\n    const keyName = fileName.replace(rootPath, '.')\n    const data = fs.readFileSync(fileName).toString('utf-8')\n    result[keyName] = JSON.parse(data)\n  }\n\n  if (!files.length) {\n    // eslint-disable-next-line no-console\n    console.log('Files not found. use: *.i18n.json format file')\n    return\n  }\n\n  for (const f of fs.readdirSync(outDir)) {\n    fs.rmSync(`${outDir}/${f}`)\n  }\n\n  if (mode === 'split') {\n    const locales = {}\n\n    for (const fileName of Object.keys(result)) {\n      const localLocales = Object.keys(result[fileName])\n\n      for (const locale of localLocales) {\n        if (!locales[locale]) locales[locale] = {}\n        locales[locale][fileName] = {}\n        locales[locale][fileName] = result[fileName][locale]\n      }\n    }\n\n    for (const locale of Object.keys(locales)) {\n      const writeData = JSON.stringify(prepareIsInlineMode(locales[locale]), null, 2)\n      fs.writeFileSync(path.resolve(outDir, `${locale}.json`), writeData, 'utf-8')\n    }\n  }\n\n  if (mode === 'single') {\n    const writeData = JSON.stringify(prepareIsInlineMode(result), null, 2)\n    fs.writeFileSync(path.resolve(outDir, 'locales.json'), writeData, 'utf-8')\n  }\n}\n\nvoid run()\n"]}